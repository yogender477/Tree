#include <stdio.h>
#include <stdlib.h>

struct node {
	int key;
	struct node *left, *right;
};

struct node* newNode(int item)
{
	struct node* temp= (struct node*)malloc(sizeof(struct node));
	temp->key = item;
	temp->left = temp->right = NULL;
	return temp;
}
void inorder(struct node* root)
{
	if (root != NULL) {
		inorder(root->left);
		printf("%d \n", root->key);
		inorder(root->right);
	}
}
struct node* insert(struct node* node, int value)
{
	if(node == NULL)
{
		return newNode(value);
}
	if(value < node->key)
{
		node->left = insert(node->left, value);
}
	else if(value > node->key)
{
		node->right = insert(node->right, value);
}

	return node;
}
void binary_search_tree(struct node *root,int item)
{
if(root==NULL)
{
printf("the number does not exit");
}
else if(item==root->key)
{
printf("the element is found");
}
else if(item<root->key)
{
return binary_search_tree(root->left,item);
}
else
{
return binary_search_tree(root->right,item);
}
}

int main()
{
        int item;
	struct node* root = NULL;
	root = insert(root, 50);
	insert(root, 30);
	insert(root, 20);
	insert(root, 40);
	insert(root, 70);
	insert(root, 60);
	insert(root, 80);
	inorder(root);
        printf("enter which number you want to search\n");
        scanf("%d",&item);
        binary_search_tree(root,item);
	return 0;
}
